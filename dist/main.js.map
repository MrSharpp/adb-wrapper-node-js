{"mappings":"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","sources":["src/index.ts","src/adb.ts","src/constants.ts"],"sourcesContent":["import adb from \"./adb\";\n\nexport default adb;\n","\"use strict\";\n\nimport { spawn } from \"child_process\";\nimport { EOL } from \"os\";\nimport { cmdRequiredDevices } from \"./constants\";\n\nconst currentDevice = \"\";\n\n/** External adb path */\nlet explicitAdbPath = \"\";\n\nconst execCmd = (cmd: string | string[]): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    !cmd\n      ? reject(new Error(\"No CMD\"))\n      : (cmd = (cmd as string)\n          .split(/\\s{1,}/g)\n          .join(\" \")\n          .split(\" \"));\n\n    if (cmdRequiredDevices.includes(cmd[0]) && currentDevice == \"\") {\n      return console.error(\n        \"this command requires device id to be set, please use setCurrentDevice function.\"\n      );\n    }\n    currentDevice == \"\" ? \"\" : (cmd as string[]).push(`-s ${currentDevice}`);\n\n    console.log(explicitAdbPath);\n\n    const cp = spawn(\"adb\", cmd as string[], {\n      env: {\n        ...process.env,\n        PATH: `${process.env.PATH};${explicitAdbPath};`,\n      },\n    });\n\n    cp.stdout.on(\"data\", (data) => resolve(data.toString()));\n    cp.stderr.on(\"data\", (data) => reject(new Error(data.toString())));\n    cp.on(\"error\", (data) => reject(new Error(data.toString())));\n  });\n};\n\nconst isAdbInstalled = (): Promise<boolean> => {\n  return new Promise((resolve, reject) => {\n    execCmd(\"--help\")\n      .then(() => resolve(true))\n      .catch((err) => resolve(false));\n  });\n};\n\ntype DeviceListType = {\n  type: string;\n  udid: string;\n  port: string;\n}[]\n\nconst deviceList = (): Promise<DeviceListType> => {\n  return new Promise((resolve, reject) => {\n    execCmd(\"devices\")\n      .then((dataString: string) => {\n        let devices: string | string[] = dataString.split(EOL);\n        devices.shift();\n        devices = devices.filter((l) => l != \"\");\n\n        const devicesObj = devices.map((device) => {\n          const tempDevice = device.split(/\\s+/);\n          const isVirtual = /\\W+/.test(tempDevice[0]);\n\n          return {\n            type: isVirtual ? \"virtual\" : \"physical\",\n            udid: tempDevice[0],\n            port: isVirtual\n              ? tempDevice[0].match(/\\W\\d{4}/)[0].slice(1, 5)\n              : null,\n          };\n        });\n\n        console.log(devicesObj);\n        resolve(devicesObj);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject([]);\n      });\n  });\n};\n\n/**\n * @param {string} device udid of the device\n */\nconst setCurrentActiveDevice = (device: string) => {\n  explicitAdbPath = device;\n};\n\nconst setAdbExplicitPath = (path: string) => {\n  explicitAdbPath = path;\n};\n\nconst killServer = () => execCmd(\"kill-server\");\n\nconst startServer = () => execCmd(\"start-server\");\n\nconst reconnect = () => execCmd(\"reconnect\");\n\nconst adb = {\n  isAdbInstalled,\n  reconnect,\n  startServer,\n  killServer,\n  setAdbExplicitPath,\n  setCurrentActiveDevice,\n  deviceList,\n};\n\nexport default adb;\n","const cmdRequiredDevices = [];\n\nexport { cmdRequiredDevices };\n"],"names":[],"version":3,"file":"main.js.map"}